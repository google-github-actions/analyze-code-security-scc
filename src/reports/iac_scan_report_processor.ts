/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as fs from 'fs';

import { debug as logDebug, setOutput } from '@actions/core';

import { Violation } from '../accessor';
import { ReportGenerator } from './report_generator';
import {
  IAC_SCAN_RESULT_SARIF_PATH_OUTPUT_KEY,
  IAC_SCAN_RESULT_SARIF_PATH_OUTPUT_VALUE,
} from '../commons/constants';

export class IACScanReportProcessor {
  /**
   * @param reportGenerator implementation of {@link ReportGenerator}
   * @param reportName name of the report that will be generated by this action.
   */
  constructor(
    private readonly reportGenerator: ReportGenerator,
    private readonly reportName: string,
  ) {}

  /**
   * Processes violations fetched from IAC scan API.
   *
   * If violations are found, this method uses `reportGenerator` to generate the report and writes the report to the github workspace.
   */
  processReport(violations: Violation[]) {
    if (violations.length == 0) {
      // no violations, returning as no action to take.
      return;
    }

    const report = this.reportGenerator.generate(violations);
    logDebug(`IAC scan report generated.`);

    fs.writeFileSync(this.reportName, report);
    setOutput(IAC_SCAN_RESULT_SARIF_PATH_OUTPUT_KEY, IAC_SCAN_RESULT_SARIF_PATH_OUTPUT_VALUE);
    logDebug(`IAC scan report written to github action workspace.`);
  }
}
